import { useState, useCallback, useMemo } from 'react';
import { usePerformanceMonitor } from '@/hooks/usePerformanceMonitor';

interface ImageOptimizationOptions {
  maxWidth?: number;
  maxHeight?: number;
  quality?: number;
  format?: 'webp' | 'jpeg' | 'png';
}

interface UseImageOptimizationReturn {
  // State
  isOptimizing: boolean;
  optimizedImageUrl: string | null;
  originalImageUrl: string | null;
  
  // Actions
  optimizeImage: (file: File, options?: ImageOptimizationOptions) => Promise<string>;
  createImagePreview: (file: File) => Promise<string>;
  compressImage: (file: File, quality?: number) => Promise<File>;
  resizeImage: (file: File, maxWidth?: number, maxHeight?: number) => Promise<File>;
  convertToWebP: (file: File) => Promise<File>;
  
  // Utilities
  getImageDimensions: (file: File) => Promise<{ width: number; height: number }>;
  validateImageFile: (file: File) => boolean;
  calculateOptimalDimensions: (width: number, height: number, maxWidth: number, maxHeight: number) => { width: number; height: number };
}

export function useImageOptimization(): UseImageOptimizationReturn {
  const { trackApiCall } = usePerformanceMonitor('ImageOptimization');
  
  // State
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizedImageUrl, setOptimizedImageUrl] = useState<string | null>(null);
  const [originalImageUrl, setOriginalImageUrl] = useState<string | null>(null);

  // Memoized utilities
  const validateImageFile = useCallback((file: File): boolean => {
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    const maxSize = 10 * 1024 * 1024; // 10MB
    
    return validTypes.includes(file.type) && file.size <= maxSize;
  }, []);

  const getImageDimensions = useCallback((file: File): Promise<{ width: number; height: number }> => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => {
        resolve({ width: img.width, height: img.height });
      };
      img.onerror = reject;
      img.src = URL.createObjectURL(file);
    });
  }, []);

  const calculateOptimalDimensions = useCallback((
    width: number, 
    height: number, 
    maxWidth: number, 
    maxHeight: number
  ): { width: number; height: number } => {
    let newWidth = width;
    let newHeight = height;
    
    // Calculate aspect ratio
    const aspectRatio = width / height;
    
    // Resize if image is too large
    if (width > maxWidth) {
      newWidth = maxWidth;
      newHeight = newWidth / aspectRatio;
    }
    
    if (newHeight > maxHeight) {
      newHeight = maxHeight;
      newWidth = newHeight * aspectRatio;
    }
    
    return {
      width: Math.round(newWidth),
      height: Math.round(newHeight)
    };
  }, []);

  // Memoized handlers
  const createImagePreview = useCallback(async (file: File): Promise<string> => {
    const startTime = performance.now();
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setOriginalImageUrl(result);
        trackApiCall('/api/createImagePreview', performance.now() - startTime, true);
        resolve(result);
      };
      reader.onerror = () => {
        trackApiCall('/api/createImagePreview', performance.now() - startTime, false);
        reject(new Error('Failed to create image preview'));
      };
      reader.readAsDataURL(file);
    });
  }, [trackApiCall]);

  const compressImage = useCallback(async (file: File, quality: number = 0.8): Promise<File> => {
    const startTime = performance.now();
    
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        
        if (ctx) {
          ctx.drawImage(img, 0, 0);
          canvas.toBlob(
            (blob) => {
              if (blob) {
                const compressedFile = new File([blob], file.name, {
                  type: file.type,
                  lastModified: Date.now(),
                });
                trackApiCall('/api/compressImage', performance.now() - startTime, true);
                resolve(compressedFile);
              } else {
                trackApiCall('/api/compressImage', performance.now() - startTime, false);
                reject(new Error('Failed to compress image'));
              }
            },
            file.type,
            quality
          );
        } else {
          trackApiCall('/api/compressImage', performance.now() - startTime, false);
          reject(new Error('Failed to get canvas context'));
        }
      };
      
      img.onerror = () => {
        trackApiCall('/api/compressImage', performance.now() - startTime, false);
        reject(new Error('Failed to load image'));
      };
      
      img.src = URL.createObjectURL(file);
    });
  }, [trackApiCall]);

  const resizeImage = useCallback(async (file: File, maxWidth: number = 1920, maxHeight: number = 1080): Promise<File> => {
    const startTime = performance.now();
    
    try {
      const dimensions = await getImageDimensions(file);
      const optimalDimensions = calculateOptimalDimensions(
        dimensions.width,
        dimensions.height,
        maxWidth,
        maxHeight
      );
      
      return new Promise((resolve, reject) => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const img = new Image();
        
        img.onload = () => {
          canvas.width = optimalDimensions.width;
          canvas.height = optimalDimensions.height;
          
          if (ctx) {
            ctx.drawImage(img, 0, 0, optimalDimensions.width, optimalDimensions.height);
            canvas.toBlob(
              (blob) => {
                if (blob) {
                  const resizedFile = new File([blob], file.name, {
                    type: file.type,
                    lastModified: Date.now(),
                  });
                  trackApiCall('/api/resizeImage', performance.now() - startTime, true);
                  resolve(resizedFile);
                } else {
                  trackApiCall('/api/resizeImage', performance.now() - startTime, false);
                  reject(new Error('Failed to resize image'));
                }
              },
              file.type,
              0.9
            );
          } else {
            trackApiCall('/api/resizeImage', performance.now() - startTime, false);
            reject(new Error('Failed to get canvas context'));
          }
        };
        
        img.onerror = () => {
          trackApiCall('/api/resizeImage', performance.now() - startTime, false);
          reject(new Error('Failed to load image'));
        };
        
        img.src = URL.createObjectURL(file);
      });
    } catch (error) {
      trackApiCall('/api/resizeImage', performance.now() - startTime, false);
      throw error;
    }
  }, [getImageDimensions, calculateOptimalDimensions, trackApiCall]);

  const convertToWebP = useCallback(async (file: File): Promise<File> => {
    const startTime = performance.now();
    
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        
        if (ctx) {
          ctx.drawImage(img, 0, 0);
          canvas.toBlob(
            (blob) => {
              if (blob) {
                const webpFile = new File([blob], file.name.replace(/\.[^/.]+$/, '.webp'), {
                  type: 'image/webp',
                  lastModified: Date.now(),
                });
                trackApiCall('/api/convertToWebP', performance.now() - startTime, true);
                resolve(webpFile);
              } else {
                trackApiCall('/api/convertToWebP', performance.now() - startTime, false);
                reject(new Error('Failed to convert image to WebP'));
              }
            },
            'image/webp',
            0.8
          );
        } else {
          trackApiCall('/api/convertToWebP', performance.now() - startTime, false);
          reject(new Error('Failed to get canvas context'));
        }
      };
      
      img.onerror = () => {
        trackApiCall('/api/convertToWebP', performance.now() - startTime, false);
        reject(new Error('Failed to load image'));
      };
      
      img.src = URL.createObjectURL(file);
    });
  }, [trackApiCall]);

  const optimizeImage = useCallback(async (file: File, options: ImageOptimizationOptions = {}): Promise<string> => {
    const startTime = performance.now();
    setIsOptimizing(true);
    
    try {
      // Validate file
      if (!validateImageFile(file)) {
        throw new Error('Invalid image file');
      }
      
      // Get default options
      const {
        maxWidth = 1920,
        maxHeight = 1080,
        quality = 0.8,
        format = 'webp'
      } = options;
      
      // Create preview first
      const previewUrl = await createImagePreview(file);
      
      // Resize image if needed
      let optimizedFile = file;
      const dimensions = await getImageDimensions(file);
      
      if (dimensions.width > maxWidth || dimensions.height > maxHeight) {
        optimizedFile = await resizeImage(file, maxWidth, maxHeight);
      }
      
      // Compress image
      optimizedFile = await compressImage(optimizedFile, quality);
      
      // Convert to WebP if requested
      if (format === 'webp') {
        optimizedFile = await convertToWebP(optimizedFile);
      }
      
      // Create final preview
      const finalPreviewUrl = await createImagePreview(optimizedFile);
      setOptimizedImageUrl(finalPreviewUrl);
      
      trackApiCall('/api/optimizeImage', performance.now() - startTime, true);
      return finalPreviewUrl;
    } catch (error) {
      console.error('Error optimizing image:', error);
      trackApiCall('/api/optimizeImage', performance.now() - startTime, false);
      throw error;
    } finally {
      setIsOptimizing(false);
    }
  }, [
    validateImageFile,
    createImagePreview,
    getImageDimensions,
    resizeImage,
    compressImage,
    convertToWebP,
    trackApiCall
  ]);

  return {
    // State
    isOptimizing,
    optimizedImageUrl,
    originalImageUrl,
    
    // Actions
    optimizeImage,
    createImagePreview,
    compressImage,
    resizeImage,
    convertToWebP,
    
    // Utilities
    getImageDimensions,
    validateImageFile,
    calculateOptimalDimensions,
  };
} 