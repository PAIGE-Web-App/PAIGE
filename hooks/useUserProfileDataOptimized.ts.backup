import { useEffect, useState, useMemo, useCallback } from "react";
import { doc, getDoc, onSnapshot } from "firebase/firestore";
import { db } from "../lib/firebase";
import { useAuth } from "../contexts/AuthContext";
import { usePerformanceMonitor } from '@/hooks/usePerformanceMonitor';

// Memoized date processing function
const processDate = (dateField: any): Date | null => {
  if (!dateField) return null;
  if (typeof dateField.toDate === 'function') return dateField.toDate();
  if (dateField instanceof Date) return dateField;
  if (dateField.seconds) return new Date(dateField.seconds * 1000);
  return null;
};

// Memoized user profile data transformation
const transformUserProfileData = (data: any) => {
  return {
    userName: data.userName || null,
    partnerName: data.partnerName || null,
    partnerEmail: data.partnerEmail || null,
    plannerName: data.plannerName || null,
    plannerEmail: data.plannerEmail || null,
    guestCount: data.guestCount || null,
    budget: data.budget || null,
    cityState: data.cityState || null,
    style: data.style || null,
    weddingLocation: data.weddingLocation || null,
    weddingLocationUndecided: data.weddingLocationUndecided || false,
    hasVenue: data.hasVenue || null,
    selectedVenueMetadata: data.selectedVenueMetadata || null,
    selectedPlannerMetadata: data.selectedPlannerMetadata || null,
    vibe: data.vibe || [],
    vibeInputMethod: data.vibeInputMethod || 'pills',
    generatedVibes: data.generatedVibes || [],
    maxBudget: data.maxBudget || null,
    phoneNumber: data.phoneNumber || null,
    notificationPreferences: {
      sms: data.notificationPreferences?.sms || false,
      email: data.notificationPreferences?.email || false,
      push: data.notificationPreferences?.push || false,
      inApp: data.notificationPreferences?.inApp || false
    },
    weddingDate: processDate(data.weddingDate),
  };
};

export function useUserProfileDataOptimized() {
  const { user, loading: authLoading } = useAuth();
  const { trackApiCall } = usePerformanceMonitor('UserProfileData');

  // State
  const [profileData, setProfileData] = useState<any>(null);
  const [profileLoading, setProfileLoading] = useState(true);
  const [reloadCount, setReloadCount] = useState(0);

  // Memoized computed values
  const daysLeft = useMemo(() => {
    if (!profileData?.weddingDate) return null;
    const today = new Date();
    const diffTime = profileData.weddingDate.getTime() - today.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }, [profileData?.weddingDate]);

  const isWeddingSoon = useMemo(() => {
    if (!daysLeft) return false;
    return daysLeft <= 30;
  }, [daysLeft]);

  const isWeddingToday = useMemo(() => {
    if (!daysLeft) return false;
    return daysLeft === 0;
  }, [daysLeft]);

  const weddingDateFormatted = useMemo(() => {
    if (!profileData?.weddingDate) return null;
    return profileData.weddingDate.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }, [profileData?.weddingDate]);

  const hasCompleteProfile = useMemo(() => {
    if (!profileData) return false;
    return !!(
      profileData.userName &&
      profileData.weddingDate &&
      profileData.weddingLocation &&
      profileData.maxBudget
    );
  }, [profileData]);

  const profileCompletionPercentage = useMemo(() => {
    if (!profileData) return 0;
    
    const requiredFields = [
      'userName',
      'weddingDate',
      'weddingLocation',
      'maxBudget',
      'partnerName',
      'guestCount'
    ];
    
    const completedFields = requiredFields.filter(field => {
      const value = profileData[field];
      if (Array.isArray(value)) return value.length > 0;
      return !!value;
    });
    
    return Math.round((completedFields.length / requiredFields.length) * 100);
  }, [profileData]);

  // Optimized load user profile data
  const loadUserProfileData = useCallback(async () => {
    if (!user?.uid) return;

    const startTime = performance.now();
    try {
      setProfileLoading(true);
      
      const userDocRef = doc(db, "users", user.uid);
      
      // Use onSnapshot for real-time updates
      const unsubscribe = onSnapshot(userDocRef, (doc) => {
        if (doc.exists()) {
          const data = doc.data();
          const transformedData = transformUserProfileData(data);
          setProfileData(transformedData);
          trackApiCall('/api/getUserProfileData', performance.now() - startTime, true);
        } else {
          setProfileData(null);
          trackApiCall('/api/getUserProfileData', performance.now() - startTime, false);
        }
        setProfileLoading(false);
      }, (error) => {
        console.error('Error loading user profile data:', error);
        setProfileLoading(false);
        trackApiCall('/api/getUserProfileData', performance.now() - startTime, false);
      });

      return unsubscribe;
    } catch (error) {
      console.error('Error setting up user profile listener:', error);
      setProfileLoading(false);
      trackApiCall('/api/getUserProfileData', performance.now() - startTime, false);
    }
  }, [user?.uid, trackApiCall]);

  // Memoized reload function
  const reload = useCallback(() => {
    setReloadCount((c) => c + 1);
  }, []);

  // Initial load
  useEffect(() => {
    const unsubscribe = loadUserProfileData();
    return () => {
      if (unsubscribe) {
        unsubscribe.then(unsub => unsub && unsub());
      }
    };
  }, [loadUserProfileData, reloadCount]);

  return {
    // Raw data
    ...profileData,
    
    // Loading state
    profileLoading,
    
    // Computed values
    daysLeft,
    isWeddingSoon,
    isWeddingToday,
    weddingDateFormatted,
    hasCompleteProfile,
    profileCompletionPercentage,
    
    // Actions
    reload,
  };
} 