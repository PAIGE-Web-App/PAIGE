"use client";

import React, { useState, useMemo, useCallback, Suspense } from 'react';
import { useRouter } from "next/navigation";
import { AnimatePresence } from "framer-motion";
import dynamic from "next/dynamic";

// Firebase imports
import { useAuth } from '@/hooks/useAuth';

// UI component imports
import Banner from '@/components/Banner';
import BottomNavBar from '@/components/BottomNavBar';
import WeddingBanner from '@/components/WeddingBanner';

// Lazy load heavy components
const BudgetSidebar = dynamic(() => import('@/components/BudgetSidebar'), {
  loading: () => <div className="w-[320px] bg-[#F3F2F0] animate-pulse" />
});

const BudgetItemsList = dynamic(() => import('@/components/BudgetItemsList'), {
  loading: () => <div className="flex-1 bg-white animate-pulse" />
});

// Mobile responsive components
const MobileBudgetNav = dynamic(() => import('@/components/budget/MobileBudgetNav'), {
  loading: () => <div className="h-16 bg-white animate-pulse" />
});

const BudgetItemsMobile = dynamic(() => import('@/components/budget/BudgetItemsMobile'), {
  loading: () => <div className="flex-1 bg-white animate-pulse" />
});

const FloatingActionButton = dynamic(() => import('@/components/budget/FloatingActionButton'), {
  ssr: false
});

const BudgetItemSideCard = dynamic(() => import('@/components/BudgetItemSideCard'), {
  loading: () => <div className="w-80 bg-white animate-pulse" />
});

const BudgetTopBar = dynamic(() => import('@/components/BudgetTopBar'), {
  loading: () => <div className="h-16 bg-white border-b border-[#AB9C95] animate-pulse" />
});

const BudgetMetrics = dynamic(() => import('@/components/BudgetMetrics'), {
  loading: () => <div className="h-32 bg-white border-b border-[#AB9C95] animate-pulse" />
});

const BudgetOverBudgetBanner = dynamic(() => import('@/components/budget/BudgetOverBudgetBanner'), {
  loading: () => <div className="h-20 bg-red-50 animate-pulse" />
});

// Lazy load modals
const BudgetItemModal = dynamic(() => import('@/components/BudgetItemModal'), {
  ssr: false
});

const VendorIntegrationModal = dynamic(() => import('@/components/VendorIntegrationModal'), {
  ssr: false
});

const AIBudgetAssistant = dynamic(() => import('@/components/AIBudgetAssistant'), {
  ssr: false
});

const BudgetCategoryModal = dynamic(() => import('@/components/BudgetCategoryModal'), {
  ssr: false
});

const DeleteCategoryModal = dynamic(() => import('@/components/DeleteCategoryModal'), {
  ssr: false
});

const LinkVendorModal = dynamic(() => import('@/components/LinkVendorModal'), {
  ssr: false
});

// Custom hooks
import { useUserProfileData } from "@/hooks/useUserProfileData";
import { useWeddingBanner } from "@/hooks/useWeddingBanner";
import { useBudgetOptimized } from "@/hooks/useBudgetOptimized";
import { usePerformanceMonitor } from "@/hooks/usePerformanceMonitor";
import toast from "react-hot-toast";
import type { BudgetItem, BudgetCategory } from "@/types/budget";

// Dynamic imports for client-side only components
const FixedSizeList = dynamic(() => import('react-window').then(mod => mod.FixedSizeList), {
  ssr: false,
  loading: () => <div>Loading...</div>
});

// Memoized Components
const BudgetItemComponent = React.memo<{
  item: BudgetItem;
  category: BudgetCategory | null;
  onEdit: (item: BudgetItem) => void;
  onDelete: (itemId: string) => void;
  onLinkVendor: (item: BudgetItem) => void;
  onAssign: (assigneeIds: string[], assigneeNames: string[], assigneeTypes: ('user' | 'contact')[], itemId: string) => Promise<void>;
}>(({ item, category, onEdit, onDelete, onLinkVendor, onAssign }) => (
  <div className="bg-white border border-[#E0DBD7] rounded-[5px] p-4 hover:shadow-sm transition-shadow">
    <div className="flex items-start justify-between">
      <div className="flex items-start gap-4 flex-1">
        {/* Item Icon */}
        <div className="w-12 h-12 bg-blue-100 rounded-[5px] flex items-center justify-center flex-shrink-0">
          <span className="text-blue-600 font-semibold">$</span>
        </div>
        
        {/* Item Details */}
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-[#332B42] mb-1">
            {item.name}
          </h3>
          {item.notes && (
            <p className="text-sm text-[#AB9C95] mb-2">
              {item.notes}
            </p>
          )}
          <div className="flex items-center gap-2">
            <span className="inline-block px-2 py-1 bg-[#F8F6F4] text-xs text-[#332B42] rounded-[3px]">
              ${item.amount.toLocaleString()}
            </span>
            {category && (
              <span className="inline-block px-2 py-1 bg-[#F8F6F4] text-xs text-[#332B42] rounded-[3px]">
                {category.name}
              </span>
            )}
            {item.isCompleted && (
              <span className="inline-block px-2 py-1 bg-green-100 text-xs text-green-700 rounded-[3px]">
                Completed
              </span>
            )}
          </div>
        </div>
      </div>
      
      {/* Actions */}
      <div className="flex items-center gap-2">
        <button 
          onClick={() => onEdit(item)}
          className="p-2 hover:bg-[#F8F6F4] rounded-[5px] transition-colors"
        >
          <span className="text-[#AB9C95]">‚úèÔ∏è</span>
        </button>
        <button 
          onClick={() => onDelete(item.id!)}
          className="p-2 hover:bg-[#F8F6F4] rounded-[5px] transition-colors"
        >
          <span className="text-[#AB9C95]">üóëÔ∏è</span>
        </button>
      </div>
    </div>
  </div>
));

BudgetItemComponent.displayName = 'BudgetItemComponent';

const LoadingState = React.memo(() => (
  <div className="flex-1 flex items-center justify-center">
    <div className="text-center">
      <div className="w-8 h-8 border-4 border-[#A85C36] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
      <p className="text-sm text-[#AB9C95]">Loading budget...</p>
    </div>
  </div>
));

LoadingState.displayName = 'LoadingState';

const EmptyState = React.memo<{ onAddItem: () => void }>(({ onAddItem }) => (
  <div className="flex-1 flex items-center justify-center">
    <div className="text-center max-w-md">
      <div className="w-32 h-32 mx-auto mb-6 bg-[#F8F6F4] rounded-full flex items-center justify-center">
        <span className="text-4xl">üí∞</span>
      </div>
      
      <button
        onClick={onAddItem}
        className="bg-[#332B42] text-white px-6 py-3 rounded-[5px] font-semibold mb-4 hover:bg-[#2A2335] transition-colors flex items-center gap-2 mx-auto"
      >
        <span>+</span>
        Add Budget Item
      </button>
      
      <p className="text-sm text-[#AB9C95] mb-2">
        Start tracking your wedding expenses by adding budget items to categories.
      </p>
    </div>
  </div>
));

EmptyState.displayName = 'EmptyState';

// Virtualized Budget Items List Component
const VirtualizedBudgetItemsList = React.memo<{
  items: BudgetItem[];
  categories: BudgetCategory[];
  onEdit: (item: BudgetItem) => void;
  onDelete: (itemId: string) => void;
  onLinkVendor: (item: BudgetItem) => void;
  onAssign: (assigneeIds: string[], assigneeNames: string[], assigneeTypes: ('user' | 'contact')[], itemId: string) => Promise<void>;
}>(({ items, categories, onEdit, onDelete, onLinkVendor, onAssign }) => {
  const ITEM_HEIGHT = 120; // Approximate height of each budget item
  const CONTAINER_HEIGHT = 600; // Fixed container height

  const VirtualizedItem = React.memo<{ 
    index: number; 
    style: React.CSSProperties; 
    data: { 
      items: BudgetItem[]; 
      categories: BudgetCategory[];
      onEdit: (item: BudgetItem) => void;
      onDelete: (itemId: string) => void;
      onLinkVendor: (item: BudgetItem) => void;
      onAssign: (assigneeIds: string[], assigneeNames: string[], assigneeTypes: ('user' | 'contact')[], itemId: string) => Promise<void>;
    }
  }>(({ index, style, data }) => {
    const item = data.items[index];
    const category = data.categories.find(cat => cat.id === item.categoryId) || null;
    
    return (
      <div style={style} className="px-4 pb-4">
        <BudgetItemComponent 
          item={item}
          category={category}
          onEdit={data.onEdit}
          onDelete={data.onDelete}
          onLinkVendor={data.onLinkVendor}
          onAssign={data.onAssign}
        />
      </div>
    );
  });

  VirtualizedItem.displayName = 'VirtualizedItem';

  const listData = useMemo(() => ({
    items,
    categories,
    onEdit,
    onDelete,
    onLinkVendor,
    onAssign,
  }), [items, categories, onEdit, onDelete, onLinkVendor, onAssign]);

  return (
    <div className="flex-1">
      <FixedSizeList
        height={CONTAINER_HEIGHT}
        width="100%"
        itemCount={items.length}
        itemSize={ITEM_HEIGHT}
        itemData={listData}
        overscanCount={3}
      >
        {VirtualizedItem}
      </FixedSizeList>
    </div>
  );
});

VirtualizedBudgetItemsList.displayName = 'VirtualizedBudgetItemsList';

// Main Budget Page Component
const BudgetPageContent: React.FC = () => {
  const { user, loading } = useAuth();
  const router = useRouter();
  const { trackApiCall } = usePerformanceMonitor('BudgetPage');

  // Use shared user profile data hook
  const { userName, daysLeft, profileLoading, weddingDate } = useUserProfileData();

  // Use custom hooks for budget functionality
  const budget = useBudgetOptimized();

  // State for selected category and item
  const [selectedCategory, setSelectedCategory] = useState<BudgetCategory | null>(null);
  const [showItemSideCard, setShowItemSideCard] = useState(false);
  const [selectedBudgetItemLocal, setSelectedBudgetItemLocal] = useState<BudgetItem | null>(null);
  const [showLinkVendorModal, setShowLinkVendorModal] = useState(false);
  const [linkingBudgetItem, setLinkingBudgetItem] = useState<BudgetItem | null>(null);
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState<BudgetCategory | null>(null);
  const [showDeleteCategoryModal, setShowDeleteCategoryModal] = useState(false);
  const [deletingCategory, setDeletingCategory] = useState<BudgetCategory | null>(null);
  const [jiggleAllocatedAmount, setJiggleAllocatedAmount] = useState(false);
  const [budgetSearchQuery, setBudgetSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState<'cards' | 'table'>('cards');
  const [triggerAddItem, setTriggerAddItem] = useState(false);
  const [activeMobileTab, setActiveMobileTab] = useState<'contacts' | 'messages' | 'todo' | 'budget'>('budget');

  // Memoized filtered budget items
  const filteredBudgetItems = useMemo(() => {
    let items = budget.budgetItems;
    
    // Filter by selected category
    if (selectedCategory) {
      items = items.filter(item => item.categoryId === selectedCategory.id);
    }
    
    // Filter by search query
    if (budgetSearchQuery) {
      const query = budgetSearchQuery.toLowerCase();
      items = items.filter(item => 
        item.name.toLowerCase().includes(query) ||
        item.notes?.toLowerCase().includes(query)
      );
    }
    
    return items;
  }, [budget.budgetItems, selectedCategory, budgetSearchQuery]);

  // Memoized selected category with spent amount
  const selectedCategoryWithSpent = useMemo(() => {
    if (!selectedCategory) return null;
    
    const spentAmount = budget.budgetItems
      .filter(item => item.categoryId === selectedCategory.id)
      .reduce((sum, item) => sum + item.amount, 0);
    
    return {
      ...selectedCategory,
      spentAmount,
    };
  }, [selectedCategory, budget.budgetItems]);

  // Memoized budget range
  const budgetRange = useMemo(() => {
    if (!budget.userMaxBudget) return null;
    return {
      min: budget.userMaxBudget * 0.8,
      max: budget.userMaxBudget,
    };
  }, [budget.userMaxBudget]);

  // Memoized over budget check
  const isOverBudget = useMemo(() => {
    if (!selectedCategoryWithSpent) return false;
    return selectedCategoryWithSpent.spentAmount > selectedCategoryWithSpent.allocatedAmount;
  }, [selectedCategoryWithSpent]);

  // Memoized handlers
  const handleMobileTabChange = useCallback((tab: string) => {
    setActiveMobileTab(tab as any);
    if (tab === 'contacts') router.push('/');
    else if (tab === 'todo') router.push('/todo');
    else if (tab === 'budget') router.push('/budget');
  }, [router]);

  const handleLinkVendor = useCallback(async (vendor: any) => {
    if (!linkingBudgetItem) return;

    const startTime = performance.now();
    try {
      await budget.handleLinkVendor(linkingBudgetItem.id!, {
        vendorId: vendor.place_id,
        vendorName: vendor.name,
        vendorPlaceId: vendor.place_id,
      });
      trackApiCall('/api/link-vendor', performance.now() - startTime, true);
      setShowLinkVendorModal(false);
      setLinkingBudgetItem(null);
    } catch (error) {
      trackApiCall('/api/link-vendor', performance.now() - startTime, false);
      console.error('Error linking vendor:', error);
    }
  }, [linkingBudgetItem, budget, trackApiCall]);

  const handleUnlinkVendor = useCallback(async () => {
    if (!linkingBudgetItem) return;

    const startTime = performance.now();
    try {
      await budget.handleLinkVendor(linkingBudgetItem.id!, {
        vendorId: '',
        vendorName: '',
        vendorPlaceId: '',
      });
      trackApiCall('/api/unlink-vendor', performance.now() - startTime, true);
      setShowLinkVendorModal(false);
      setLinkingBudgetItem(null);
    } catch (error) {
      trackApiCall('/api/unlink-vendor', performance.now() - startTime, false);
      console.error('Error unlinking vendor:', error);
    }
  }, [linkingBudgetItem, budget, trackApiCall]);

  const openLinkVendorModal = useCallback((budgetItem: BudgetItem) => {
    setLinkingBudgetItem(budgetItem);
    setShowLinkVendorModal(true);
  }, []);

  const handleAddItem = useCallback(() => {
    setTriggerAddItem(true);
  }, []);

  const handleEditItem = useCallback((item: BudgetItem) => {
    budget.handleEditBudgetItem(item);
  }, [budget]);

  const handleDeleteItem = useCallback(async (itemId: string) => {
    const startTime = performance.now();
    try {
      await budget.handleDeleteBudgetItem(itemId);
      trackApiCall('/api/delete-budget-item', performance.now() - startTime, true);
    } catch (error) {
      trackApiCall('/api/delete-budget-item', performance.now() - startTime, false);
      console.error('Error deleting budget item:', error);
    }
  }, [budget, trackApiCall]);

  const handleAssignItem = useCallback(async (assigneeIds: string[], assigneeNames: string[], assigneeTypes: ('user' | 'contact')[], itemId: string) => {
    const startTime = performance.now();
    try {
      await budget.handleAssignBudgetItem(assigneeIds, assigneeNames, assigneeTypes, itemId);
      trackApiCall('/api/assign-budget-item', performance.now() - startTime, true);
    } catch (error) {
      trackApiCall('/api/assign-budget-item', performance.now() - startTime, false);
      console.error('Error assigning budget item:', error);
    }
  }, [budget, trackApiCall]);

  // Loading states
  if (loading) {
    return (
      <div className="min-h-screen bg-[#F3F2F0] flex items-center justify-center">
        <div className="text-[#332B42]">Loading...</div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-[#F3F2F0] flex items-center justify-center">
        <div className="text-[#332B42]">Please log in to access budget.</div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full bg-linen">
      {/* Wedding Banner */}
      <WeddingBanner 
        daysLeft={daysLeft}
        userName={userName}
        isLoading={profileLoading}
        onSetWeddingDate={() => {}}
      />
      
      {/* Main Content */}
      <div className="app-content-container flex-1 overflow-hidden">
        <div className="flex h-full gap-4 lg:flex-row flex-col">
          
          {/* Main Content Area */}
          <main className="unified-container">
            {/* Budget Sidebar - Categories (Desktop Only) */}
            <BudgetSidebar
              budgetCategories={budget.budgetCategories}
              selectedCategory={selectedCategory}
              setSelectedCategory={setSelectedCategory}
              onAddCategory={() => {
                const newCategory = {
                  id: 'new',
                  userId: user?.uid || '',
                  name: 'New Category',
                  allocatedAmount: 0,
                  spentAmount: 0,
                  orderIndex: budget.budgetCategories.length,
                  createdAt: new Date(),
                  color: '#A85C36',
                };
                setEditingCategory(newCategory);
                setShowCategoryModal(true);
              }}
              budgetItems={budget.budgetItems}
            />

            {/* Main Content Area */}
            <div className="unified-main-content">
              {/* Budget Top Bar - Category Title and Actions */}
              <BudgetTopBar
                selectedCategory={selectedCategory}
                budgetSearchQuery={budgetSearchQuery}
                setBudgetSearchQuery={setBudgetSearchQuery}
                onShowAIAssistant={() => budget.setShowAIAssistant(true)}
                onShowCSVUpload={() => {}} // TODO: Implement CSV upload
                onAddItem={handleAddItem}
                onEditCategory={(category) => {
                  setEditingCategory(category);
                  setShowCategoryModal(true);
                }}
                onDeleteCategory={(category) => {
                  setDeletingCategory(category);
                  setShowDeleteCategoryModal(true);
                }}
                viewMode={viewMode}
                onViewModeChange={(mode) => {
                  setViewMode(mode);
                  localStorage.setItem('budgetViewMode', mode);
                }}
              />

              {/* Budget Metrics - After Category Title and Actions */}
                             <BudgetMetrics
                 selectedCategory={selectedCategoryWithSpent}
                 totalBudget={budget.userTotalBudget}
                 totalSpent={budget.totalSpent}
                 maxBudget={budget.userMaxBudget}
                 onEditCategory={(category) => {
                   setEditingCategory(category);
                   setJiggleAllocatedAmount(true);
                   setShowCategoryModal(true);
                   // Reset jiggle after animation
                   setTimeout(() => setJiggleAllocatedAmount(false), 1000);
                 }}
               />

              {/* Budget Items List */}
              <div className="flex-1 flex gap-4 min-h-0">
                <div className="flex-1 flex flex-col">
                  {/* Over Budget Warning Banner */}
                  {isOverBudget && selectedCategory && (
                    <BudgetOverBudgetBanner
                      categoryName={selectedCategory.name}
                      spentAmount={selectedCategoryWithSpent?.spentAmount || 0}
                      allocatedAmount={selectedCategory.allocatedAmount}
                    />
                  )}
                  
                  {/* Virtualized Budget Items List */}
                  {filteredBudgetItems.length === 0 ? (
                    <EmptyState onAddItem={handleAddItem} />
                  ) : (
                    <div className="flex-1 p-6">
                      <VirtualizedBudgetItemsList
                        items={filteredBudgetItems}
                        categories={budget.budgetCategories}
                        onEdit={handleEditItem}
                        onDelete={handleDeleteItem}
                        onLinkVendor={openLinkVendorModal}
                        onAssign={handleAssignItem}
                      />
                    </div>
                  )}
                </div>

                {/* Budget Item Side Card - Right Panel */}
                {showItemSideCard && selectedBudgetItemLocal && (
                  <BudgetItemSideCard
                    isOpen={true}
                    onClose={() => {
                      setShowItemSideCard(false);
                      setSelectedBudgetItemLocal(null);
                    }}
                    budgetItem={selectedBudgetItemLocal}
                    category={selectedCategory}
                    onEdit={() => {
                      budget.setSelectedBudgetItem(selectedBudgetItemLocal);
                      budget.setShowBudgetItemModal(true);
                      setShowItemSideCard(false);
                    }}
                    onLinkVendor={() => {
                      openLinkVendorModal(selectedBudgetItemLocal);
                      setShowItemSideCard(false);
                    }}
                  />
                )}
              </div>
            </div>
          </main>
        </div>
      </div>

      {/* Modals */}
      <AnimatePresence>
        {budget.showBudgetItemModal && budget.selectedBudgetItem && (
          <BudgetItemModal
            isOpen={budget.showBudgetItemModal}
            onClose={() => budget.setShowBudgetItemModal(false)}
            budgetItem={budget.selectedBudgetItem}
            categories={budget.budgetCategories}
            onSave={budget.handleUpdateBudgetItem}
            onDelete={budget.handleDeleteBudgetItem}
          />
        )}

                 {budget.showVendorIntegrationModal && budget.selectedBudgetItem && (
           <VendorIntegrationModal
             isOpen={budget.showVendorIntegrationModal}
             onClose={() => budget.setShowVendorIntegrationModal(false)}
             budgetItem={budget.selectedBudgetItem}
             onLinkVendor={budget.handleLinkVendor}
           />
         )}

        {showLinkVendorModal && linkingBudgetItem && (
          <LinkVendorModal
            isOpen={showLinkVendorModal}
            onClose={() => {
              setShowLinkVendorModal(false);
              setLinkingBudgetItem(null);
            }}
            onLinkVendor={handleLinkVendor}
            onUnlinkVendor={handleUnlinkVendor}
            budgetItem={linkingBudgetItem}
            userId={user?.uid || ''}
          />
        )}

        {budget.showAIAssistant && (
          <AIBudgetAssistant
            isOpen={budget.showAIAssistant}
            onClose={() => budget.setShowAIAssistant(false)}
            onGenerateBudget={budget.handleGenerateBudget}
            onGenerateTodoList={budget.handleGenerateTodoList}
            onGenerateIntegratedPlan={budget.handleGenerateIntegratedPlan}
            weddingDate={weddingDate ? new Date(weddingDate) : null}
            totalBudget={budget.userTotalBudget}
          />
        )}

        {showCategoryModal && editingCategory && (
          <BudgetCategoryModal
            isOpen={showCategoryModal}
            onClose={() => {
              setShowCategoryModal(false);
              setEditingCategory(null);
            }}
            category={editingCategory}
            budgetCategories={budget.budgetCategories}
            userMaxBudget={budgetRange?.max || null}
            onUpdateMaxBudget={async (newMaxBudget: number) => {
              // TODO: Implement budget range update
            }}
            jiggleAllocatedAmount={jiggleAllocatedAmount}
            onSave={(categoryId, updates) => {
              if (categoryId === 'new') {
                budget.handleAddCategory(updates.name!, updates.allocatedAmount || 0);
              } else {
                budget.handleEditCategory(categoryId, updates);
                // Update selectedCategory if it's the one being edited
                if (selectedCategory && selectedCategory.id === categoryId) {
                  setSelectedCategory({
                    ...selectedCategory,
                    ...updates
                  });
                }
              }
              setShowCategoryModal(false);
              setEditingCategory(null);
            }}
            onDelete={editingCategory.id !== 'new' ? (categoryId) => {
              const category = budget.budgetCategories.find(cat => cat.id === categoryId);
              if (category) {
                setDeletingCategory(category);
                setShowCategoryModal(false);
                setShowDeleteCategoryModal(true);
              }
            } : undefined}
          />
        )}

        {showDeleteCategoryModal && deletingCategory && (
          <DeleteCategoryModal
            isOpen={showDeleteCategoryModal}
            onClose={() => {
              setShowDeleteCategoryModal(false);
              setDeletingCategory(null);
            }}
            category={deletingCategory}
            onDelete={(categoryId) => {
              budget.handleDeleteCategory(categoryId);
              setShowDeleteCategoryModal(false);
              setDeletingCategory(null);
            }}
          />
        )}
      </AnimatePresence>

      {/* Mobile Navigation */}
      <BottomNavBar
        activeTab="budget"
        onTabChange={handleMobileTabChange}
      />
    </div>
  );
};

// Main Budget Page with Suspense
export default function BudgetPageOptimized() {
  return (
    <Suspense fallback={<LoadingState />}>
      <BudgetPageContent />
    </Suspense>
  );
} 