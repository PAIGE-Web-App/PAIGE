import { OpenAI } from "openai";
import { NextResponse } from "next/server";
import { withCreditValidation } from "../../../lib/creditMiddleware";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Main handler function
async function handleBudgetGeneration(req: Request) {
  try {
    const body = await req.json();
    const { description, totalBudget, weddingDate } = body;

    let prompt = `Generate a comprehensive wedding budget breakdown based on the user's description and total budget. Your goal is to create realistic, well-organized budget categories with specific line items.\n`;
    prompt += `\n--- BUDGET RULES ---\n`;
    prompt += `1. **Realistic Allocation**: Distribute the budget across categories based on typical wedding costs and priorities.\n`;
    prompt += `2. **Detailed Line Items**: Each category should have specific, actionable items with realistic prices.\n`;
    prompt += `3. **Priority-Based**: Allocate more budget to high-impact areas (venue, catering, photography).\n`;
    prompt += `4. **Flexibility**: Include some buffer for unexpected costs.\n`;
    prompt += `5. **Regional Awareness**: Consider typical costs for a wedding in the user's area.\n`;
    
    prompt += `\n--- CATEGORY STRUCTURE ---\n`;
    prompt += `Use these standard wedding budget categories (or create new ones if needed):\n`;
    prompt += `- Venue & Location\n`;
    prompt += `- Catering & Food\n`;
    prompt += `- Photography & Videography\n`;
    prompt += `- Attire & Accessories\n`;
    prompt += `- Flowers & Decorations\n`;
    prompt += `- Entertainment & Music\n`;
    prompt += `- Transportation\n`;
    prompt += `- Wedding Rings\n`;
    prompt += `- Stationery & Invitations\n`;
    prompt += `- Hair & Makeup\n`;
    prompt += `- Wedding Cake\n`;
    prompt += `- Officiant & Ceremony\n`;
    prompt += `- Miscellaneous & Contingency\n`;

    prompt += `\n--- OUTPUT FORMAT ---\n`;
    prompt += `Return only valid JSON in this format:\n`;
    prompt += `{\n`;
    prompt += `  "categories": [\n`;
    prompt += `    {\n`;
    prompt += `      "name": "Category Name",\n`;
    prompt += `      "allocatedAmount": 5000,\n`;
    prompt += `      "items": [\n`;
    prompt += `        {\n`;
    prompt += `          "name": "Item Name",\n`;
    prompt += `          "amount": 2500,\n`;
    prompt += `          "notes": "Description or vendor notes"\n`;
    prompt += `        }\n`;
    prompt += `      ]\n`;
    prompt += `    }\n`;
    prompt += `  ]\n`;
    prompt += `}\n`;

    prompt += `\nTotal Budget: $${totalBudget}\n`;
    prompt += `Wedding Description: ${description}\n`;
    if (weddingDate) {
      prompt += `Wedding Date: ${weddingDate}\n`;
    }
    prompt += `\nGenerate a realistic budget breakdown that totals approximately $${totalBudget}.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "You are a wedding budget expert that creates realistic, detailed budget breakdowns." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
    });

    const content = completion.choices[0].message.content;
    if (!content) {
      throw new Error("No content generated by OpenAI");
    }

    // Try to parse as JSON
    let result;
    try {
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      result = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
    } catch (e) {
      throw new Error("Failed to parse AI response as JSON");
    }

    if (!result || !Array.isArray(result.categories)) {
      throw new Error("AI response did not contain valid budget categories");
    }

    // Validate and normalize the response
    const validatedCategories = result.categories.map((category: any) => ({
      name: category.name || "Uncategorized",
      allocatedAmount: parseFloat(category.allocatedAmount) || 0,
      items: Array.isArray(category.items) ? category.items.map((item: any) => ({
        name: item.name || "Unnamed Item",
        amount: parseFloat(item.amount) || 0,
        notes: item.notes || ""
      })) : []
    }));

    return NextResponse.json({
      categories: validatedCategories,
      totalAllocated: validatedCategories.reduce((sum: number, cat: any) => sum + cat.allocatedAmount, 0)
    });

  } catch (error: any) {
    console.error('Error generating budget:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to generate budget' },
      { status: 500 }
    );
  }
}

// Export the POST function wrapped with credit validation
export const POST = withCreditValidation(handleBudgetGeneration, {
  feature: 'budget_generation',
  userIdField: 'userId',
  requireAuth: true,
  errorMessage: 'Insufficient credits for budget generation. Please upgrade your plan to continue using AI features.'
});