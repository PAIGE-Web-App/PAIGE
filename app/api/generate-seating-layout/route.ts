import { OpenAI } from "openai";
import { NextResponse } from "next/server";
import { withCreditValidation } from "../../../lib/creditMiddleware";
import { Guest, TableType } from "../../../types/seatingChart";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Main handler function
async function handleSeatingLayoutGeneration(req: Request) {
  try {
    const body = await req.json();
    const { guests, tables, eventType, chartName } = body;

    if (!guests || !Array.isArray(guests) || guests.length === 0) {
      return NextResponse.json({ error: "Guests are required" }, { status: 400 });
    }

    if (!tables || !Array.isArray(tables) || tables.length === 0) {
      return NextResponse.json({ error: "Tables are required" }, { status: 400 });
    }

    // Calculate total capacity
    const totalCapacity = tables.reduce((sum: number, table: TableType) => sum + table.capacity, 0);
    
    if (guests.length > totalCapacity) {
      return NextResponse.json({ 
        error: `Not enough seats. You have ${guests.length} guests but only ${totalCapacity} seats.` 
      }, { status: 400 });
    }

    // Prepare guest information for AI
    const guestInfo = guests.map((guest: Guest) => {
      let info = `Name: ${guest.fullName}`;
      if (guest.relationship) info += `, Relationship: ${guest.relationship}`;
      if (guest.mealPreference) info += `, Meal: ${guest.mealPreference}`;
      if (guest.notes) info += `, Notes: ${guest.notes}`;
      return info;
    }).join('\n');

    // Prepare table information
    const tableInfo = tables.map((table: TableType) => {
      return `${table.name} (${table.type}, ${table.capacity} seats)${table.description ? ` - ${table.description}` : ''}`;
    }).join('\n');

    let prompt = `You are an expert wedding seating coordinator. Create an optimal seating arrangement for the following event:\n\n`;
    prompt += `**Event Details:**\n`;
    prompt += `- Event Type: ${eventType || 'Wedding Event'}\n`;
    if (chartName) prompt += `- Chart Name: ${chartName}\n`;
    prompt += `\n**Guest Information:**\n${guestInfo}\n\n`;
    prompt += `**Available Tables:**\n${tableInfo}\n\n`;

    prompt += `**Instructions:**\n`;
    prompt += `1. Create an optimal seating arrangement that maximizes guest comfort and conversation flow\n`;
    prompt += `2. Consider the AI-generated notes for each guest when making placement decisions\n`;
    prompt += `3. Group family members and close friends together when appropriate\n`;
    prompt += `4. Balance table dynamics - mix ages, personalities, and conversation styles\n`;
    prompt += `5. Place guests with dietary restrictions near appropriate service areas\n`;
    prompt += `6. Consider the sweetheart table as the focal point\n`;
    prompt += `7. Ensure all guests are assigned to tables\n\n`;

    prompt += `**Response Format:**\n`;
    prompt += `Return a JSON object with the following structure:\n`;
    prompt += `{\n`;
    prompt += `  "assignments": [\n`;
    prompt += `    {\n`;
    prompt += `      "guestId": "guest-id",\n`;
    prompt += `      "guestName": "Guest Name",\n`;
    prompt += `      "tableId": "table-id",\n`;
    prompt += `      "tableName": "Table Name",\n`;
    prompt += `      "seatNumber": 1,\n`;
    prompt += `      "reasoning": "Brief explanation for this placement"\n`;
    prompt += `    }\n`;
    prompt += `  ],\n`;
    prompt += `  "summary": "Overall strategy and key considerations for this seating arrangement"\n`;
    prompt += `}\n\n`;

    prompt += `Generate the seating arrangement now:`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: "You are an expert wedding seating coordinator with years of experience creating optimal guest arrangements. Focus on guest comfort, conversation flow, and practical considerations." 
        },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const content = completion.choices[0].message.content;
    if (!content) {
      throw new Error("No content generated by OpenAI");
    }

    // Try to parse as JSON
    let result;
    try {
      // Find the first { ... } block in the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      result = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
    } catch (e) {
      throw new Error("Failed to parse AI response as JSON");
    }

    if (!result || !result.assignments || !Array.isArray(result.assignments)) {
      throw new Error("AI response did not contain valid seating assignments");
    }

    // Validate that all guests are assigned
    const assignedGuestIds = result.assignments.map((a: any) => a.guestId);
    const allGuestIds = guests.map((g: Guest) => g.id);
    const unassignedGuests = allGuestIds.filter(id => !assignedGuestIds.includes(id));
    
    if (unassignedGuests.length > 0) {
      console.warn(`Some guests were not assigned: ${unassignedGuests.join(', ')}`);
    }

    return NextResponse.json({ 
      assignments: result.assignments,
      summary: result.summary || "Seating arrangement generated successfully",
      success: true 
    });

  } catch (error: any) {
    console.error("Error in /api/generate-seating-layout:", error);
    return NextResponse.json(
      { error: "Failed to generate seating layout" }, 
      { status: 500 }
    );
  }
}

// Export the POST function wrapped with credit validation
export const POST = withCreditValidation(handleSeatingLayoutGeneration, {
  feature: 'seating_layout_generation',
  userIdField: 'userId',
  requireAuth: true,
  errorMessage: 'Insufficient credits for seating layout generation. Please upgrade your plan to continue using AI features.'
});

