import { OpenAI } from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { description, categories, weddingDate } = body;

    let prompt = `Generate a wedding-related prep to-do list based on the custom input that the user provided in the 'Describe the type of list you would like to create' input. Assign each task a realistic deadline, spaced out from today up to the wedding date, so that tasks are not all due on the same day. Please reference and assign categories that already exist for the user; however, don't be afraid to create new ones but let the user know which ones are new!\n`;
    prompt += `You are a smart assistant for to-do list creation. Based on the following description, generate a JSON object with a list name and an array of tasks. Each task should have a name, a short note, an optional deadline (in YYYY-MM-DD format), and a category. Use only these categories unless a new one is truly unique: ${Array.isArray(categories) && categories.length > 0 ? categories.join(', ') : 'any relevant category'}. If you must create a new category, mark it with [NEW] at the end of the category name.\n`;
    prompt += `IMPORTANT: All deadlines must be today or in the future (never before today). Do not generate any deadlines in the past.\n`;
    prompt += `IMPORTANT: Never use "Uncategorized", "Needs Category", or any generic placeholder as a category. Every task must have a specific, relevant category. If you create a new category, make it descriptive and meaningful, and mark it with [NEW].\n`;
    if (weddingDate) {
      prompt += `The user's wedding date is ${weddingDate}. Generate deadlines relative to this date (e.g., '2 weeks before the wedding'). For all to-do items except those clearly related to the honeymoon or post-wedding, deadlines must not be after the wedding date. Only honeymoon or post-wedding tasks may have deadlines after the wedding date.\n`;
    }
    prompt += `\nDescription: ${description}\n\nReturn only valid JSON in this format:\n{\n  "name": "List Name",\n  "tasks": [\n    { "name": "Task 1", "note": "...", "deadline": "YYYY-MM-DD", "category": "..." },\n    ...\n  ]\n}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are a helpful assistant that generates structured to-do lists in JSON." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
    });

    const content = completion.choices[0].message.content;
    if (!content) {
      throw new Error("No content generated by OpenAI");
    }

    // Try to parse as JSON
    let result;
    try {
      // Find the first { ... } block in the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      result = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
    } catch (e) {
      throw new Error("Failed to parse AI response as JSON");
    }
    if (!result || !result.name || !Array.isArray(result.tasks)) {
      throw new Error("AI response did not contain a valid list");
    }

    // Ensure all deadlines are today or later
    const today = new Date();
    today.setHours(0,0,0,0);
    let soonestDeadline = null;
    let warning = '';
    if (Array.isArray(result.tasks)) {
      result.tasks = result.tasks.map(task => {
        if (task.deadline) {
          const d = new Date(task.deadline);
          if (d < today) {
            task.deadline = today.toISOString().slice(0, 10);
          }
          if (!soonestDeadline || new Date(task.deadline) < new Date(soonestDeadline)) {
            soonestDeadline = task.deadline;
          }
        }
        return task;
      });
    }
    // Add warning if soonest deadline is today and there are many tasks, or if wedding is very soon
    if (soonestDeadline === today.toISOString().slice(0, 10) && result.tasks.length > 10) {
      warning = 'Heads up! Your first to-do is due today and there are a lot of tasks. This may be challenging to accomplish in time.';
    }
    if (weddingDate) {
      const wedding = new Date(weddingDate);
      if (!isNaN(wedding.getTime())) {
        const daysToWedding = Math.ceil((wedding.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
        if (daysToWedding < 60 && result.tasks.length > 10) {
          warning = 'Your wedding is coming up soon and there are many tasks. Consider adjusting your timeline for a less stressful experience!';
        }
      }
    }
    result.warning = warning;
    return NextResponse.json(result);
  } catch (error: any) {
    console.error("Error in /api/generate-list:", error);
    return new NextResponse("Failed to generate list.", { status: 500 });
  }
} 