"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import { doc, updateDoc } from "firebase/firestore";
import { db } from "../../../lib/firebase";
import { toast } from "react-hot-toast";
import { useUserProfileDataOptimized } from "../../../hooks/useUserProfileDataOptimized";
import { usePerformanceMonitor } from '@/hooks/usePerformanceMonitor';

export function useProfileFormOptimized(user: any, updateUser: (data: any) => Promise<void>) {
  const { trackApiCall } = usePerformanceMonitor('ProfileForm');
  
  // State
  const [saving, setSaving] = useState(false);
  const [jiggleAnimate, setJiggleAnimate] = useState('');
  const [showGmailConfirmModal, setShowGmailConfirmModal] = useState<string | null>(null);
  const [pendingGoogleAction, setPendingGoogleAction] = useState<(() => Promise<void>) | null>(null);

  // Use optimized user profile data hook
  const {
    weddingDate: firestoreWeddingDate,
    userName: firestoreUserName,
    partnerName: firestorePartnerName,
    partnerEmail: firestorePartnerEmail,
    plannerName: firestorePlannerName,
    plannerEmail: firestorePlannerEmail,
    guestCount: firestoreGuestCount,
    weddingLocation: firestoreWeddingLocation,
    weddingLocationUndecided: firestoreWeddingLocationUndecided,
    hasVenue: firestoreHasVenue,
    selectedVenueMetadata: firestoreSelectedVenueMetadata,
    selectedPlannerMetadata: firestoreSelectedPlannerMetadata,
    vibe: firestoreVibe,
    vibeInputMethod: firestoreVibeInputMethod,
    generatedVibes: firestoreGeneratedVibes,
    maxBudget: firestoreMaxBudget,
    profileLoading,
    reload: reloadUserProfile,
  } = useUserProfileDataOptimized();

  // Account form state
  const [email, setEmail] = useState("");
  const [userName, setUserName] = useState("");
  const [partnerName, setPartnerName] = useState("");
  const [partnerEmail, setPartnerEmail] = useState("");
  const [plannerName, setPlannerName] = useState("");
  const [plannerEmail, setPlannerEmail] = useState("");

  // Wedding form state
  const [weddingDate, setWeddingDate] = useState<string>("");
  const [weddingLocation, setWeddingLocation] = useState("");
  const [weddingLocationUndecided, setWeddingLocationUndecided] = useState(false);
  const [hasVenue, setHasVenue] = useState<boolean | null>(null);
  const [selectedVenueMetadata, setSelectedVenueMetadata] = useState<any>(null);
  const [venueSearch, setVenueSearch] = useState("");
  const [selectedPlannerMetadata, setSelectedPlannerMetadata] = useState<any>(null);
  const [plannerSearch, setPlannerSearch] = useState("");
  const [vibe, setVibe] = useState<string[]>([]);
  const [vibeInputMethod, setVibeInputMethod] = useState('pills');
  const [generatedVibes, setGeneratedVibes] = useState<string[]>([]);
  const [maxBudget, setMaxBudget] = useState<number>(40000);
  const [guestCount, setGuestCount] = useState(120);
  const [selectedLocationType, setSelectedLocationType] = useState<string | null>(null);
  const [weddingLocationCoords, setWeddingLocationCoords] = useState<{ lat: number; lng: number } | null>(null);

  // Memoized computed values
  const hasUnsavedChanges = useMemo(() => {
    if (profileLoading) return false;
    
    return (
      userName !== firestoreUserName ||
      partnerName !== firestorePartnerName ||
      partnerEmail !== firestorePartnerEmail ||
      plannerName !== firestorePlannerName ||
      plannerEmail !== firestorePlannerEmail ||
      weddingDate !== (firestoreWeddingDate ? new Date(firestoreWeddingDate).toISOString().split('T')[0] : "") ||
      weddingLocation !== firestoreWeddingLocation ||
      weddingLocationUndecided !== firestoreWeddingLocationUndecided ||
      hasVenue !== firestoreHasVenue ||
      JSON.stringify(selectedVenueMetadata) !== JSON.stringify(firestoreSelectedVenueMetadata) ||
      JSON.stringify(selectedPlannerMetadata) !== JSON.stringify(firestoreSelectedPlannerMetadata) ||
      JSON.stringify(vibe) !== JSON.stringify(firestoreVibe) ||
      vibeInputMethod !== firestoreVibeInputMethod ||
      JSON.stringify(generatedVibes) !== JSON.stringify(firestoreGeneratedVibes) ||
      maxBudget !== firestoreMaxBudget ||
      guestCount !== firestoreGuestCount
    );
  }, [
    profileLoading,
    userName, firestoreUserName,
    partnerName, firestorePartnerName,
    partnerEmail, firestorePartnerEmail,
    plannerName, firestorePlannerName,
    plannerEmail, firestorePlannerEmail,
    weddingDate, firestoreWeddingDate,
    weddingLocation, firestoreWeddingLocation,
    weddingLocationUndecided, firestoreWeddingLocationUndecided,
    hasVenue, firestoreHasVenue,
    selectedVenueMetadata, firestoreSelectedVenueMetadata,
    selectedPlannerMetadata, firestoreSelectedPlannerMetadata,
    vibe, firestoreVibe,
    vibeInputMethod, firestoreVibeInputMethod,
    generatedVibes, firestoreGeneratedVibes,
    maxBudget, firestoreMaxBudget,
    guestCount, firestoreGuestCount
  ]);

  const accountFormValid = useMemo(() => {
    return userName.trim().length > 0;
  }, [userName]);

  const weddingFormValid = useMemo(() => {
    return (
      weddingDate &&
      (weddingLocation || weddingLocationUndecided) &&
      maxBudget > 0 &&
      guestCount > 0
    );
  }, [weddingDate, weddingLocation, weddingLocationUndecided, maxBudget, guestCount]);

  // Sync with Firestore data
  useEffect(() => {
    if (!profileLoading) {
      // Account
      setEmail(user?.email || "");
      setUserName(firestoreUserName || "");
      setPartnerName(firestorePartnerName || "");
      setPartnerEmail(firestorePartnerEmail || "");
      setPlannerName(firestorePlannerName || "");
      setPlannerEmail(firestorePlannerEmail || "");

      // Wedding
      setWeddingDate(firestoreWeddingDate ? new Date(firestoreWeddingDate).toISOString().split('T')[0] : "");
      setWeddingLocation(firestoreWeddingLocation || "");
      setWeddingLocationUndecided(firestoreWeddingLocationUndecided || false);
      setHasVenue(firestoreHasVenue);
      setSelectedVenueMetadata(firestoreSelectedVenueMetadata);
      setSelectedPlannerMetadata(firestoreSelectedPlannerMetadata);
      // Set coordinates from venue metadata if available
      if (firestoreSelectedVenueMetadata?.geometry?.location) {
        setWeddingLocationCoords({
          lat: firestoreSelectedVenueMetadata.geometry.location.lat,
          lng: firestoreSelectedVenueMetadata.geometry.location.lng
        });
      } else {
        setWeddingLocationCoords(null);
      }
      setVibe(firestoreVibe || []);
      setVibeInputMethod(firestoreVibeInputMethod || 'pills');
      setGeneratedVibes(firestoreGeneratedVibes || []);
      setMaxBudget(firestoreMaxBudget || 40000);
      setGuestCount(firestoreGuestCount || 120);
    }
  }, [
    profileLoading,
    user,
    firestoreUserName,
    firestorePartnerName,
    firestorePartnerEmail,
    firestorePlannerName,
    firestorePlannerEmail,
    firestoreWeddingDate,
    firestoreWeddingLocation,
    firestoreWeddingLocationUndecided,
    firestoreHasVenue,
    firestoreSelectedVenueMetadata,
    firestoreSelectedPlannerMetadata,
    firestoreVibe,
    firestoreVibeInputMethod,
    firestoreGeneratedVibes,
    firestoreMaxBudget,
    firestoreGuestCount
  ]);

  // Memoized handlers
  const handleWeddingSave = useCallback(async () => {
    if (!user?.uid || !weddingFormValid) return;

    const startTime = performance.now();
    try {
      setSaving(true);
      setJiggleAnimate('wedding');

      const updateData: any = {
        weddingDate: new Date(weddingDate),
        weddingLocation,
        weddingLocationUndecided,
        hasVenue,
        selectedVenueMetadata,
        selectedPlannerMetadata,
        vibe,
        vibeInputMethod,
        generatedVibes,
        maxBudget,
        guestCount,
      };

      // Update Firestore
      const userRef = doc(db, "users", user.uid);
      await updateDoc(userRef, updateData);

      // Update local auth context
      await updateUser(updateData);

      toast.success("Wedding details saved successfully!");
      trackApiCall('/api/saveWeddingDetails', performance.now() - startTime, true);

      setTimeout(() => setJiggleAnimate(''), 1000);
    } catch (error) {
      console.error('Error saving wedding details:', error);
      toast.error("Failed to save wedding details");
      trackApiCall('/api/saveWeddingDetails', performance.now() - startTime, false);
    } finally {
      setSaving(false);
    }
  }, [
    user?.uid,
    weddingFormValid,
    weddingDate,
    weddingLocation,
    weddingLocationUndecided,
    hasVenue,
    selectedVenueMetadata,
    selectedPlannerMetadata,
    vibe,
    vibeInputMethod,
    generatedVibes,
    maxBudget,
    guestCount,
    updateUser,
    trackApiCall
  ]);

  const handleAccountSave = useCallback(async () => {
    if (!user?.uid || !accountFormValid) return;

    const startTime = performance.now();
    try {
      setSaving(true);
      setJiggleAnimate('account');

      const updateData: any = {
        userName,
        partnerName,
        partnerEmail,
        plannerName,
        plannerEmail,
      };

      // Update Firestore
      const userRef = doc(db, "users", user.uid);
      await updateDoc(userRef, updateData);

      // Update local auth context
      await updateUser(updateData);

      toast.success("Account details saved successfully!");
      trackApiCall('/api/saveAccountDetails', performance.now() - startTime, true);

      setTimeout(() => setJiggleAnimate(''), 1000);
    } catch (error) {
      console.error('Error saving account details:', error);
      toast.error("Failed to save account details");
      trackApiCall('/api/saveAccountDetails', performance.now() - startTime, false);
    } finally {
      setSaving(false);
    }
  }, [
    user?.uid,
    accountFormValid,
    userName,
    partnerName,
    partnerEmail,
    plannerName,
    plannerEmail,
    updateUser,
    trackApiCall
  ]);

  const handleVibeUpdate = useCallback((newVibe: string[]) => {
    setVibe(newVibe);
  }, []);

  const handleGeneratedVibesUpdate = useCallback((newGeneratedVibes: string[]) => {
    setGeneratedVibes(newGeneratedVibes);
  }, []);

  const handleVenueSelect = useCallback((venue: any) => {
    setSelectedVenueMetadata(venue);
    setWeddingLocation(venue.name);
    setHasVenue(true);
    setVenueSearch("");
    
    if (venue.geometry?.location) {
      setWeddingLocationCoords({
        lat: venue.geometry.location.lat,
        lng: venue.geometry.location.lng
      });
    }
  }, []);

  const handlePlannerSelect = useCallback((planner: any) => {
    setSelectedPlannerMetadata(planner);
    setPlannerName(planner.name);
    setPlannerEmail(planner.email || "");
    setPlannerSearch("");
  }, []);

  const resetForm = useCallback(() => {
    // Reset all form fields to their Firestore values
    setUserName(firestoreUserName || "");
    setPartnerName(firestorePartnerName || "");
    setPartnerEmail(firestorePartnerEmail || "");
    setPlannerName(firestorePlannerName || "");
    setPlannerEmail(firestorePlannerEmail || "");
    setWeddingDate(firestoreWeddingDate ? new Date(firestoreWeddingDate).toISOString().split('T')[0] : "");
    setWeddingLocation(firestoreWeddingLocation || "");
    setWeddingLocationUndecided(firestoreWeddingLocationUndecided || false);
    setHasVenue(firestoreHasVenue);
    setSelectedVenueMetadata(firestoreSelectedVenueMetadata);
    setSelectedPlannerMetadata(firestoreSelectedPlannerMetadata);
    setVibe(firestoreVibe || []);
    setVibeInputMethod(firestoreVibeInputMethod || 'pills');
    setGeneratedVibes(firestoreGeneratedVibes || []);
    setMaxBudget(firestoreMaxBudget || 40000);
    setGuestCount(firestoreGuestCount || 120);
  }, [
    firestoreUserName,
    firestorePartnerName,
    firestorePartnerEmail,
    firestorePlannerName,
    firestorePlannerEmail,
    firestoreWeddingDate,
    firestoreWeddingLocation,
    firestoreWeddingLocationUndecided,
    firestoreHasVenue,
    firestoreSelectedVenueMetadata,
    firestoreSelectedPlannerMetadata,
    firestoreVibe,
    firestoreVibeInputMethod,
    firestoreGeneratedVibes,
    firestoreMaxBudget,
    firestoreGuestCount
  ]);

  return {
    // State
    saving,
    jiggleAnimate,
    showGmailConfirmModal,
    pendingGoogleAction,
    email,
    userName,
    setUserName,
    partnerName,
    setPartnerName,
    partnerEmail,
    setPartnerEmail,
    plannerName,
    setPlannerName,
    plannerEmail,
    setPlannerEmail,
    weddingDate,
    setWeddingDate,
    weddingLocation,
    setWeddingLocation,
    weddingLocationUndecided,
    setWeddingLocationUndecided,
    hasVenue,
    setHasVenue,
    selectedVenueMetadata,
    setSelectedVenueMetadata,
    venueSearch,
    setVenueSearch,
    selectedPlannerMetadata,
    setSelectedPlannerMetadata,
    plannerSearch,
    setPlannerSearch,
    vibe,
    setVibe,
    vibeInputMethod,
    setVibeInputMethod,
    generatedVibes,
    setGeneratedVibes,
    maxBudget,
    setMaxBudget,
    guestCount,
    setGuestCount,
    selectedLocationType,
    setSelectedLocationType,
    weddingLocationCoords,
    setWeddingLocationCoords,

    // Computed values
    hasUnsavedChanges,
    accountFormValid,
    weddingFormValid,

    // Actions
    setShowGmailConfirmModal,
    setPendingGoogleAction,
    handleWeddingSave,
    handleAccountSave,
    handleVibeUpdate,
    handleGeneratedVibesUpdate,
    handleVenueSelect,
    handlePlannerSelect,
    resetForm,
  };
} 